1. 페치조인 개요

	페치 조인(fetch join) 실무에서 중요
	sql 종류가 아니고 jpql 성능최적화를 위해 제공
	sql을 한 번에 조회 가능
	join fetch 명령어 사용
	즉시로딩을 명시적으로 표현하는것과 비슷함
	지연로딩으로 새로운 데이터를 가져올때마다 쿼리를 날리기 때문에 쿼리가 너무 많이 사용됨(fetch 사용x 일때)
	fetch : 조인해서 필요한 데이터를 한 번에 모두 가져온다.
	지연로딩보다 fetch 조인을 우선적으로 실행한다.


2. 엔티티 페치조인
	
	String query = "select m from Member m"; --일반 쿼리
	String query = "select m from Member m join fetch m.team t"; //fetch 조인 쿼리 (select m.* from member m, Team t where m.team_id = t.id)
	            List<Member> resultList = em.createQuery(query, Member.class)
	                    .getResultList();

	            for (Member member1 : resultList) {
	                System.out.println("member1.getUsername() = " + member1.getUsername());
	                System.out.println("member1.getTeam().getName() = " + member1.getTeam().getName());
	            }
            


3. 컬렉션 페치 조인
	일대다 관계 컬렉션 페치 조인
	일대다 관계는 데이터가 중복되어 표출됨(뻥튀기)
	다대일 관계는 데이터 뻥튀기 일어나지 않음
	
	SQL의 DISTINCT 는 중복된 걸과를 제거하는 명령
	JPQL의 DISTINCT 2가지 기능 제공
		1) SQL에 DISTINCT를 추가
		2) 에플리케이션에서 엔티티 중복 제거 
		   -DB에서 가져온 데이터중 중복이 있으면 애플리케이션단에서 제거해준다.
		   -모든 데이터의 상태가 같은 데이터만 제거가 된다. 로우의 상태가 모두 일치할때
	
	String query = "select t from Team t join fetch t.members"; //(select t.* from member m, Team t where m.team_id = t.id)
  List<Team> resultList = em.createQuery(query, Team.class)
          .getResultList();
  for (Team team : resultList) {
      System.out.println("team.getName() = " + team.getName());
      System.out.println("team.getMembers() = " + team.getMembers().size());
  }
  

4. 페치조인과 일반조인의 차이
	JPQL은 결과를 반환할 때 연관관계 고려 x
	단지 SELECT 절에 지정한 엔티티만 조회할 뿐
	여기서는 팀 엔티티만 조회하고 회원 엔티티는 조회 X
	페치조인을 사용할 때만 연관된 엔티티도 함께 조회(즉시로딩)
	페치조인은 객체 그래프를 SQL 한번에 조회하는 기능
	
	엔티티 조회시 데이터 관계에 따른 N+1개만큼 쿼리가 나가는 현상을 페치조인으로 해결함